// Generated by gencpp from file i2c_sensors/AccGyroSensorMsg.msg
// DO NOT EDIT!


#ifndef I2C_SENSORS_MESSAGE_ACCGYROSENSORMSG_H
#define I2C_SENSORS_MESSAGE_ACCGYROSENSORMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace i2c_sensors
{
template <class ContainerAllocator>
struct AccGyroSensorMsg_
{
  typedef AccGyroSensorMsg_<ContainerAllocator> Type;

  AccGyroSensorMsg_()
    : header()
    , dataAccX()
    , dataAccY()
    , dataAccZ()
    , dataGyroX()
    , dataGyroY()
    , dataGyroZ()  {
    }
  AccGyroSensorMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dataAccX(_alloc)
    , dataAccY(_alloc)
    , dataAccZ(_alloc)
    , dataGyroX(_alloc)
    , dataGyroY(_alloc)
    , dataGyroZ(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataAccX_type;
  _dataAccX_type dataAccX;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataAccY_type;
  _dataAccY_type dataAccY;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataAccZ_type;
  _dataAccZ_type dataAccZ;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataGyroX_type;
  _dataGyroX_type dataGyroX;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataGyroY_type;
  _dataGyroY_type dataGyroY;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _dataGyroZ_type;
  _dataGyroZ_type dataGyroZ;




  typedef boost::shared_ptr< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AccGyroSensorMsg_

typedef ::i2c_sensors::AccGyroSensorMsg_<std::allocator<void> > AccGyroSensorMsg;

typedef boost::shared_ptr< ::i2c_sensors::AccGyroSensorMsg > AccGyroSensorMsgPtr;
typedef boost::shared_ptr< ::i2c_sensors::AccGyroSensorMsg const> AccGyroSensorMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace i2c_sensors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'i2c_sensors': ['/home/odroid/ros_workspace/src/i2c_sensors/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39b1a4f3a166a3d32060891b757a8ed0";
  }

  static const char* value(const ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39b1a4f3a166a3d3ULL;
  static const uint64_t static_value2 = 0x2060891b757a8ed0ULL;
};

template<class ContainerAllocator>
struct DataType< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "i2c_sensors/AccGyroSensorMsg";
  }

  static const char* value(const ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64[] dataAccX\n\
float64[] dataAccY\n\
float64[] dataAccZ\n\
float64[] dataGyroX\n\
float64[] dataGyroY\n\
float64[] dataGyroZ\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dataAccX);
      stream.next(m.dataAccY);
      stream.next(m.dataAccZ);
      stream.next(m.dataGyroX);
      stream.next(m.dataGyroY);
      stream.next(m.dataGyroZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AccGyroSensorMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::i2c_sensors::AccGyroSensorMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dataAccX[]" << std::endl;
    for (size_t i = 0; i < v.dataAccX.size(); ++i)
    {
      s << indent << "  dataAccX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataAccX[i]);
    }
    s << indent << "dataAccY[]" << std::endl;
    for (size_t i = 0; i < v.dataAccY.size(); ++i)
    {
      s << indent << "  dataAccY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataAccY[i]);
    }
    s << indent << "dataAccZ[]" << std::endl;
    for (size_t i = 0; i < v.dataAccZ.size(); ++i)
    {
      s << indent << "  dataAccZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataAccZ[i]);
    }
    s << indent << "dataGyroX[]" << std::endl;
    for (size_t i = 0; i < v.dataGyroX.size(); ++i)
    {
      s << indent << "  dataGyroX[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataGyroX[i]);
    }
    s << indent << "dataGyroY[]" << std::endl;
    for (size_t i = 0; i < v.dataGyroY.size(); ++i)
    {
      s << indent << "  dataGyroY[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataGyroY[i]);
    }
    s << indent << "dataGyroZ[]" << std::endl;
    for (size_t i = 0; i < v.dataGyroZ.size(); ++i)
    {
      s << indent << "  dataGyroZ[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dataGyroZ[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // I2C_SENSORS_MESSAGE_ACCGYROSENSORMSG_H
